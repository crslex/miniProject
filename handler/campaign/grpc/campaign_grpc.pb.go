// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: handler/campaign/grpc/campaign.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CampaignHandlerClient is the client API for CampaignHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampaignHandlerClient interface {
	GetCampaignByID(ctx context.Context, in *GetCampaignByIDRequest, opts ...grpc.CallOption) (*Campaign, error)
	GetCampaignByIDElasticSearch(ctx context.Context, in *GetCampaignByIDRequest, opts ...grpc.CallOption) (*Campaign, error)
	GetCampaignByListID(ctx context.Context, in *GetCampaignByListIDRequest, opts ...grpc.CallOption) (*GetCampaignByIDResponse, error)
	GetCampaignByListIDElasticSearch(ctx context.Context, in *GetCampaignByListIDRequest, opts ...grpc.CallOption) (*GetCampaignByIDResponse, error)
}

type campaignHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCampaignHandlerClient(cc grpc.ClientConnInterface) CampaignHandlerClient {
	return &campaignHandlerClient{cc}
}

func (c *campaignHandlerClient) GetCampaignByID(ctx context.Context, in *GetCampaignByIDRequest, opts ...grpc.CallOption) (*Campaign, error) {
	out := new(Campaign)
	err := c.cc.Invoke(ctx, "/campaign.CampaignHandler/GetCampaignByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignHandlerClient) GetCampaignByIDElasticSearch(ctx context.Context, in *GetCampaignByIDRequest, opts ...grpc.CallOption) (*Campaign, error) {
	out := new(Campaign)
	err := c.cc.Invoke(ctx, "/campaign.CampaignHandler/GetCampaignByIDElasticSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignHandlerClient) GetCampaignByListID(ctx context.Context, in *GetCampaignByListIDRequest, opts ...grpc.CallOption) (*GetCampaignByIDResponse, error) {
	out := new(GetCampaignByIDResponse)
	err := c.cc.Invoke(ctx, "/campaign.CampaignHandler/GetCampaignByListID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignHandlerClient) GetCampaignByListIDElasticSearch(ctx context.Context, in *GetCampaignByListIDRequest, opts ...grpc.CallOption) (*GetCampaignByIDResponse, error) {
	out := new(GetCampaignByIDResponse)
	err := c.cc.Invoke(ctx, "/campaign.CampaignHandler/GetCampaignByListIDElasticSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampaignHandlerServer is the server API for CampaignHandler service.
// All implementations must embed UnimplementedCampaignHandlerServer
// for forward compatibility
type CampaignHandlerServer interface {
	GetCampaignByID(context.Context, *GetCampaignByIDRequest) (*Campaign, error)
	GetCampaignByIDElasticSearch(context.Context, *GetCampaignByIDRequest) (*Campaign, error)
	GetCampaignByListID(context.Context, *GetCampaignByListIDRequest) (*GetCampaignByIDResponse, error)
	GetCampaignByListIDElasticSearch(context.Context, *GetCampaignByListIDRequest) (*GetCampaignByIDResponse, error)
	mustEmbedUnimplementedCampaignHandlerServer()
}

// UnimplementedCampaignHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedCampaignHandlerServer struct {
}

func (UnimplementedCampaignHandlerServer) GetCampaignByID(context.Context, *GetCampaignByIDRequest) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignByID not implemented")
}
func (UnimplementedCampaignHandlerServer) GetCampaignByIDElasticSearch(context.Context, *GetCampaignByIDRequest) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignByIDElasticSearch not implemented")
}
func (UnimplementedCampaignHandlerServer) GetCampaignByListID(context.Context, *GetCampaignByListIDRequest) (*GetCampaignByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignByListID not implemented")
}
func (UnimplementedCampaignHandlerServer) GetCampaignByListIDElasticSearch(context.Context, *GetCampaignByListIDRequest) (*GetCampaignByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignByListIDElasticSearch not implemented")
}
func (UnimplementedCampaignHandlerServer) mustEmbedUnimplementedCampaignHandlerServer() {}

// UnsafeCampaignHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampaignHandlerServer will
// result in compilation errors.
type UnsafeCampaignHandlerServer interface {
	mustEmbedUnimplementedCampaignHandlerServer()
}

func RegisterCampaignHandlerServer(s grpc.ServiceRegistrar, srv CampaignHandlerServer) {
	s.RegisterService(&CampaignHandler_ServiceDesc, srv)
}

func _CampaignHandler_GetCampaignByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignHandlerServer).GetCampaignByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campaign.CampaignHandler/GetCampaignByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignHandlerServer).GetCampaignByID(ctx, req.(*GetCampaignByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignHandler_GetCampaignByIDElasticSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignHandlerServer).GetCampaignByIDElasticSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campaign.CampaignHandler/GetCampaignByIDElasticSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignHandlerServer).GetCampaignByIDElasticSearch(ctx, req.(*GetCampaignByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignHandler_GetCampaignByListID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignByListIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignHandlerServer).GetCampaignByListID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campaign.CampaignHandler/GetCampaignByListID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignHandlerServer).GetCampaignByListID(ctx, req.(*GetCampaignByListIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignHandler_GetCampaignByListIDElasticSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignByListIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignHandlerServer).GetCampaignByListIDElasticSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/campaign.CampaignHandler/GetCampaignByListIDElasticSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignHandlerServer).GetCampaignByListIDElasticSearch(ctx, req.(*GetCampaignByListIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CampaignHandler_ServiceDesc is the grpc.ServiceDesc for CampaignHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CampaignHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "campaign.CampaignHandler",
	HandlerType: (*CampaignHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCampaignByID",
			Handler:    _CampaignHandler_GetCampaignByID_Handler,
		},
		{
			MethodName: "GetCampaignByIDElasticSearch",
			Handler:    _CampaignHandler_GetCampaignByIDElasticSearch_Handler,
		},
		{
			MethodName: "GetCampaignByListID",
			Handler:    _CampaignHandler_GetCampaignByListID_Handler,
		},
		{
			MethodName: "GetCampaignByListIDElasticSearch",
			Handler:    _CampaignHandler_GetCampaignByListIDElasticSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handler/campaign/grpc/campaign.proto",
}
